****************************************************************************************************
React

  *introduction
  *state
  *Ajax
  *Redux


****************************************************************************************************
*introduction

  React is a javaScript library that is used to produce html that is shown to a user in the web browser
  componentes and views -> are snippets of javaScript code that produce html
    first we create the component
    then we insert it into the dom


  ************************************************** 
  React.DOM

    import React from 'react';           // used to create and manage components sometimes with non web dev apps (this is also used to transpile JSX to HTML)
    import ReactDOM from 'react-dom';    // this is used to manipulate the dom when working with browser web apps
                                         
    components need to be instanciated before they are rendered to the DOM
      -> when rendering to the dom you do not render the actual component (or stateless function) you render an instance of the function or class
         example : <App></App>
         example : <App />      // if the component text is empty is can be self closed

    ReactDOM.render(<App />, document.querySelector(".container"));    // renders the react component to the page

  **************************************************
  class Componnets

    the class keyword comes from es6
    a javascript object with properties and methods to it

      class SearchBar extends React.Component {   // this allows the class to have access to the functionality of React.Component class
        render() {                                // classes require the render method and they must return some jsx


**************************************************************************************************** 
*state

  state is a plain javascript object that is used to record and react to user events
  whenever a components state is changed it re-renders all of its elements and forces all of the children elements to re-render as well
  state is initialized in the contsructor (functional components do not have state)

  ************************************************** 
  constructor function

    is ran whenever an instance of the component is created
    super(props) // React.Component extends from the Component library, super calls the Components own constructor function and passes it (props)
  ************************************************** 

  state

    only in the constructor function do you manipulate the state directly, all other places we will use this.setState()
    whenever state is updated the render function of the component is run and the dom is updated


  ************************************************** 
  controled components

    are components that are controled by state
    this allows us to easily populate the state of a value
    this also makes it easier to get the current value of an element at any time (instead of jQuery where you have to find the value on the page)

    example : 

      <input
        value={this.state.inputValue}                                    // the value displayed of the input box is actually comming from the state
        onChange={e => this.setState({inputValue: e.target.value})}      // whenever a key is typed the state is being updated
      />


****************************************************************************************************
*Ajax

  downwards data flow -> data can't be pushed up so data must be provided at a point where all components that rely on the data are below the data point

  ************************************************** 
  lodash

    one of the functionality of lodash is the ablitiy to throttle a function call using debounce

    example :

      $ npm install --save lodash
      import _ from 'lodash';



****************************************************************************************************
*Redux
  
  Redux vs React

      Redux is a predictible state container for javaScript applications
        it is where all the data in the app is contained in an app (including the current state)

      React handles all the manipulations of the views 
        its job is to translate the data onto the screen into something the user can view and interact with

  Redux
    we centralize all of the applications data into a single object (instead of collections used in backbone, flux..)
      this single object is refered to as the state (application level state)
      there is a distinction between component level state and redux (application level) state


      ************************************************** 
      reducers

        Redux stores application level state in a sigle object.
        A Reducer is a function that returns a piece of the applications state
          since out application can have many different pieces of state we can have many different reducers

          example : each reducer commonly has its own js file in src

            src/reducers/reducer_books.js       
            
              this reducer(function) returns all the books from the application level state object
              it is good practice to prepend the name of the js file with reducer_ because an application will commonly have multiple books.js files

      ************************************************** 
      react-redux

        react and redux are completly seperate libraries
        the react-redux library is used to connect the react and redux libraries,
          it is capable of accessing the redux object that holds the state for the entire application


      **************************************************
      containers vs components

        whenever there is a connection between a component and Redux the component becomes a container
        a container does not export a class

        the react-redux library has a method called connect that acceps a function and the components state as arguments
        connect combineds these arguments to create a container
          a container is just like a regular component but it is a smart component because it is aware of the state contained in Redux
          the function that is passed as an argument is the glue between react and redux, it takes the state and maps it to props and returns an object

          example :
            function mapStateToProps(state) {
              return {
                books: state.books   // this has access to this.props.books
              }
            }
        
        think of a container as a promoted component
        it is the same as a class component but it has direct access to the apps global state (managed by redux)
        if a containers state ever changes it will instantly re-render

        a container should be the most parent component that cares about a piece of state
          if a higher parent dosen't need to use the state than it shouldn't have access to it, instead a child should be the container
          only the parent most component that uses a paticular piece of state needs to be connected to Redux

        react-redux 
          a library that forms a bridge between react(views) and redux(application state)
          containers allow you to take a react component and inject state into it

        containers are also refered to as smart components (instead or dumb components)
          -> the teachers explination of a dumb component is a component that does not have a dirrect connection to Redux
             but previous instructor explained a dumb component as a component without state (a stateless function)????


  containers, components and reducers should all have their own directory
    containers have direct access to the applications state through Redux (the parent most component that needs access to a piece of state)
    components (are dumb) and only have local state or are stateless functions
    reducers are a function that returns a piece of state


    ************************************************** 
    actions and action creators

      actions and actions creators allow you to change the state of the Redux object

      actions can be triggered by
        user events
        form submitssions
        ajax requests getting returned

      an action creator is a function that returns an action (object of data)
        this action flows through all of the reducers

      example : 
        user clicks a on a book item which triggers the creation of an action
        the action object contains information about the selected book and sends it to all reducers inside the application
        the reducers can choose (depending on the action) to return a different piece of state
          this changes the application state which causes all of the components to re-render
   
        it is a common pattern to include a 'type' key in the action object that holds information about the type of action that took place
        it is also common for reducers to have switch statements that respond to the different types 











